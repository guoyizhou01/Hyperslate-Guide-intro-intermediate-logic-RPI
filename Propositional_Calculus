Propositional Calculus includes ∧, ∨, ¬, =>, <=>

Code for a∧b: (and a b)
Code for a∧b∧c: (and a b c)
Code for (a∧b)∧c: (and (and a b) c)

∧ intro: 
  Meaning: given a, b, conclude a∧b.
  Input: at least two nodes, a and b
  Output: a∧b (from node a and node b)
  Example: Figure 1.1
  Note: you can use ∧ intro to conclude a∧b∧c from a, b, and c, but it cannot conclude (a∧b)∧c, in which you need two steps

∧ elim:
  Meaning: given a∧b, conclude a
  Input: one node, a∧b
  Output: a (from node a∧b)
  Example: Figure 1.2
  Note: you can use ∧ elim to conclude a from a∧b∧c, but it cannot conclude from (a∧b)∧c, in which you need two steps


Code for a∨b: (or a b)
Code for a∨b∨c: (or a b c)
Code for (a∨b)∨c: (or (or a b) c)

∨ intro: 
  Meaning: given a, conclude a∨b.
  Input: one node, a
  Output: a∨b (from node a)
  Example: Figure 1.3
  Note: you can use ∨ intro to conclude a∨b∨c from a, but it cannot conclude (a∨b)∨c, in which you need two steps

Note: ∨ elim is somehow complicated
∨ elim:
  Meaning: given c (from a), c (from b), and a∨b conclude c
  Input: at least three nodes, c (from a), c (from b), a∨b
  Output: c (from node a∨b)
  Example: Figure 1.4

¬ intro:
  Meaning: assumption a is wrong, thus ¬a. (For explanation purpose, let's assume b(from a) )
  Input: Typically two nodes, b(from a) and ¬b. Could be one node, b∧(¬b)
  Output: ¬a (from ¬b)
  Example: not yet available

¬ elim:
  Meaning: assumption ¬a is wrong, thus a. (for explanation purpose, let's assume b(from ¬a) )
  Input: Typically two node,  b(from ¬a) and ¬b. Could be one node, b∧(¬b)
  Output: a (from ¬b)
  Example: not yet available

=> intro:
  Meaning: given b(from a), conclude a=>b. Notice, b must be the node directly above => intro
  Input: One node b(from a)
  Output: a=>b (from nothing)
  Example: Figure 1.7
  Note: Typically the structure in Figure 1.7 is used for problems, but the it's not necessary to have a∧b to conclude a=>b (see the bottom => intro in Figure 1.8, please ignore and it is safe to ignore the □ symbol since the example was created in S5 mode) 

=> elim:
  Meaning: given a=>b and a, conclude b.
  Input: Two nodes a=>b and a
  Output: b (from node a=>b and a)
  Example: not yet available

<=> intro:
  Meaning: given b(from a) and a(from b), conclude a<=>b.
  Input: Two nodes, b(from a) and a(from b)
  Output: a<=>b (from nothing)
  Example: Figure 1.10 and 1.11

<=> elim:
  Meaning: given a<=>b and a (or b), conclude b(or a).
  Input: Two nodes a<=>b and a (or b)
  Output: b (or a) (from node a<=>b and a (or b) )
  Example: not yet available










